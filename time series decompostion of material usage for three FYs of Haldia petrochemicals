{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP/BvCWJbIjQa/pwNbw62pY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pratanu-chowdhury/sentiment-analysis-of-women-apparel-reviews/blob/main/time%20series%20decompostion%20of%20material%20usage%20for%20three%20FYs%20of%20Haldia%20petrochemicals\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "kgHMtgs9QrmT",
        "outputId": "ce9110f9-a2b2-4c24-e286-b06abe798aaf"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         Material Name  Material Type Unit FY 2021-22 FY 2022-23 FY 2023-24\n",
              "0              Naphtha  Raw materials   MT  16,23,240  17,86,130  17,60,136\n",
              "1             Methanol  Raw materials   MT     22,535     24,698     26,064\n",
              "2  Purchased propylene  Raw materials   MT      2,403        714      1,434\n",
              "3        Purchased LPG  Raw materials   MT     10,844     33,603     28,162\n",
              "4            Additives  Raw materials   MT      2,664      3,079      2,995"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a39eab63-6f81-4852-8744-c07ac311552b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Material Name</th>\n",
              "      <th>Material Type</th>\n",
              "      <th>Unit</th>\n",
              "      <th>FY 2021-22</th>\n",
              "      <th>FY 2022-23</th>\n",
              "      <th>FY 2023-24</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Naphtha</td>\n",
              "      <td>Raw materials</td>\n",
              "      <td>MT</td>\n",
              "      <td>16,23,240</td>\n",
              "      <td>17,86,130</td>\n",
              "      <td>17,60,136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Methanol</td>\n",
              "      <td>Raw materials</td>\n",
              "      <td>MT</td>\n",
              "      <td>22,535</td>\n",
              "      <td>24,698</td>\n",
              "      <td>26,064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Purchased propylene</td>\n",
              "      <td>Raw materials</td>\n",
              "      <td>MT</td>\n",
              "      <td>2,403</td>\n",
              "      <td>714</td>\n",
              "      <td>1,434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Purchased LPG</td>\n",
              "      <td>Raw materials</td>\n",
              "      <td>MT</td>\n",
              "      <td>10,844</td>\n",
              "      <td>33,603</td>\n",
              "      <td>28,162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Additives</td>\n",
              "      <td>Raw materials</td>\n",
              "      <td>MT</td>\n",
              "      <td>2,664</td>\n",
              "      <td>3,079</td>\n",
              "      <td>2,995</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a39eab63-6f81-4852-8744-c07ac311552b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a39eab63-6f81-4852-8744-c07ac311552b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a39eab63-6f81-4852-8744-c07ac311552b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b6f146ea-7e37-4bc5-b0ff-f9574ce755fd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b6f146ea-7e37-4bc5-b0ff-f9574ce755fd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b6f146ea-7e37-4bc5-b0ff-f9574ce755fd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"Error: /tsdecomp\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Material Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Methanol\",\n          \"Additives\",\n          \"Purchased propylene\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Material Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Raw materials\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"MT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FY 2021-22\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"22,535\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FY 2022-23\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"24,698\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FY 2023-24\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"26,064\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "try:\n",
        "    df = pd.read_csv('/tsdecomp.csv')\n",
        "    display(df.head())\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: /tsdecomp.csv not found. Please make sure the file is uploaded to your Colab environment at the root level or provide the correct path.\")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59138690",
        "outputId": "184677ff-dd7b-4652-b021-68ba1d3cfc97"
      },
      "source": [
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming the DataFrame 'df' has a column for the year and a column for 'net yearwise material usage'\n",
        "# Replace 'Year' and 'Net Material Usage' with the actual column names from your CSV\n",
        "# You might need to adjust the 'period' parameter based on your data's frequency (e.g., 1 for yearly)\n",
        "try:\n",
        "    # Assuming 'Year' is the column with the financial year (e.g., '2021-22')\n",
        "    # Assuming 'Net Material Usage' is the column with the material usage data\n",
        "    # Convert 'Year' to a suitable format if necessary, or use it as is if it can be sorted chronologically\n",
        "    # For yearly data, a period of 1 is appropriate for seasonal decomposition if you expect a yearly pattern,\n",
        "    # but with only 3 data points (21-22, 22-23, 23-24), seasonality decomposition might not be meaningful.\n",
        "    # Let's proceed with decomposition assuming a basic structure.\n",
        "\n",
        "    # It's better to have a numerical representation of the year for time series index\n",
        "    # Assuming the year column can be converted or mapped to a chronological order\n",
        "    # Let's assume a column named 'Financial_Year' and 'Net_Material_Usage'\n",
        "    # You might need to adjust column names based on your CSV\n",
        "    df['Financial_Year_Sort'] = df['Financial_Year'].replace({'21-22': 2022, '22-23': 2023, '23-24': 2024})\n",
        "    df = df.sort_values('Financial_Year_Sort')\n",
        "    df = df.set_index('Financial_Year_Sort')\n",
        "\n",
        "    # Select the column for decomposition - assuming 'Net_Material_Usage'\n",
        "    # If your data has a different column name for net material usage, please replace 'Net_Material_Usage'\n",
        "    time_series_data = df['Net_Material_Usage']\n",
        "\n",
        "    # Perform decomposition. With only 3 data points, additive decomposition is more suitable.\n",
        "    # The 'period' parameter is less meaningful with so few data points for seasonality.\n",
        "    # We'll perform a basic decomposition.\n",
        "    decomposition = seasonal_decompose(time_series_data, model='additive', period=1) # period=1 for yearly data\n",
        "\n",
        "    # Plot the decomposed components\n",
        "    fig = decomposition.plot()\n",
        "    fig.set_size_inches(10, 8)\n",
        "    plt.suptitle('Time Series Decomposition of Net Material Usage', y=1.02)\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found. Please check the column names in your CSV. Details: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred during decomposition: {e}\")"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "An error occurred during decomposition: name 'df' is not defined\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "be2b873f",
        "outputId": "8604e7a6-402b-4bb6-bdb6-ec7fd4d60fae"
      },
      "source": [
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming the DataFrame 'df' has a column for the year and a column for 'net yearwise material usage'\n",
        "# Replace 'Year' and 'Net Material Usage' with the actual column names from your CSV\n",
        "# You might need to adjust the 'period' parameter based on your data's frequency (e.g., 1 for yearly)\n",
        "try:\n",
        "    # Assuming 'Financial_Year' is the column with the financial year (e.g., '21-22')\n",
        "    # Assuming 'Net_Material_Usage' is the column with the material usage data\n",
        "    # Convert 'Year' to a suitable format if necessary, or use it as is if it can be sorted chronologically\n",
        "    # For yearly data, a period of 1 is appropriate for seasonal decomposition if you expect a yearly pattern,\n",
        "    # but with only 3 data points (21-22, 22-23, 23-24), seasonality decomposition might not be meaningful.\n",
        "    # Let's proceed with decomposition assuming a basic structure.\n",
        "\n",
        "    # It's better to have a numerical representation of the year for time series index\n",
        "    # Assuming the year column can be converted or mapped to a chronological order\n",
        "    # Let's assume a column named 'Financial_Year' and 'Net_Material_Usage'\n",
        "    # You might need to adjust column names based on your CSV\n",
        "    df['Financial_Year_Sort'] = df['Financial_Year'].replace({'21-22': 2022, '22-23': 2023, '23-24': 2024})\n",
        "    df = df.sort_values('Financial_Year_Sort')\n",
        "    df = df.set_index('Financial_Year_Sort')\n",
        "\n",
        "    # Select the column for decomposition - assuming 'Net_Material_Usage'\n",
        "    # If your data has a different column name for net material usage, please replace 'Net_Material_Usage'\n",
        "    time_series_data = df['Net_Material_Usage']\n",
        "\n",
        "    # Perform decomposition. With only 3 data points, additive decomposition is more suitable.\n",
        "    # The 'period' parameter is less meaningful with so few data points for seasonality.\n",
        "    # We'll perform a basic decomposition.\n",
        "    decomposition = seasonal_decompose(time_series_data, model='additive', period=1) # period=1 for yearly data\n",
        "\n",
        "    # Plot the decomposed components\n",
        "    fig = decomposition.plot()\n",
        "    fig.set_size_inches(10, 8)\n",
        "    plt.suptitle('Time Series Decomposition of Net Material Usage', y=1.02)\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found. Please check the column names in your CSV. Details: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred during decomposition: {e}\")"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "An error occurred during decomposition: name 'df' is not defined\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 737
        },
        "id": "0d155665",
        "outputId": "b78331c9-3b05-470d-ffe0-17f475341b15"
      },
      "source": [
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Assuming the DataFrame 'df' has columns for the financial years and material usage\n",
        "try:\n",
        "    # Restructure the DataFrame to a long format suitable for time series\n",
        "    # We need to melt the DataFrame to have years in one column and values in another\n",
        "    df_melted = df.melt(id_vars=['Material Name', 'Material Type', 'Unit'],\n",
        "                        value_vars=['FY 2021-22', 'FY 2022-23', 'FY 2023-24'],\n",
        "                        var_name='FY', # Changed column name from 'Financial_Year' to 'FY'\n",
        "                        value_name='Material_Usage')\n",
        "\n",
        "    # Convert 'Material_Usage' to numeric, handling potential commas\n",
        "    df_melted['Material_Usage'] = df_melted['Material_Usage'].str.replace(',', '', regex=False).astype(float)\n",
        "\n",
        "    # Create a numerical representation of the year for time series index\n",
        "    # The mapping is still needed to sort and index chronologically\n",
        "    df_melted['Financial_Year_Sort'] = df_melted['FY'].replace({'FY 2021-22': 2022, 'FY 2022-23': 2023, 'FY 2023-24': 2024})\n",
        "\n",
        "    # For time series decomposition, we need a single series.\n",
        "    # The request mentions \"net yearwise material usage\" and \"year wise turnout of the materials\".\n",
        "    # From the data, \"Total materials consumed\" seems to be the \"net yearwise material usage\".\n",
        "    # Filter for \"Total materials consumed\" and set the financial year as index\n",
        "    net_material_usage_df = df_melted[df_melted['Material Name'] == 'Total materials consumed'].copy()\n",
        "    net_material_usage_df = net_material_usage_df.sort_values('Financial_Year_Sort')\n",
        "    net_material_usage_df = net_material_usage_df.set_index('Financial_Year_Sort')\n",
        "\n",
        "    # Select the column for decomposition\n",
        "    time_series_data = net_material_usage_df['Material_Usage']\n",
        "\n",
        "    # Perform decomposition. With only 3 data points, additive decomposition is more suitable.\n",
        "    # The 'period' parameter is less meaningful with so few data points for seasonality.\n",
        "    # We'll perform a basic decomposition.\n",
        "    decomposition = seasonal_decompose(time_series_data, model='additive', period=1) # period=1 for yearly data\n",
        "\n",
        "    # Plot the decomposed components\n",
        "    fig = decomposition.plot()\n",
        "    fig.set_size_inches(10, 8)\n",
        "    plt.suptitle('Time Series Decomposition of Total Materials Consumed', y=1.02)\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found during processing. Details: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred during decomposition: {e}\")"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-12-2984230209.py:19: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
            "  df_melted['Financial_Year_Sort'] = df_melted['FY'].replace({'FY 2021-22': 2022, 'FY 2022-23': 2023, 'FY 2023-24': 2024})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f646666a"
      },
      "source": [
        "# Task\n",
        "Perform a regression analysis on the data in the file \"tsdecomp.csv\" where the predictors are the material-wise turnouts for each financial year (FY21-22, FY22-23, FY23-24) and the response is the net material usage for each financial year."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "20e61dfc"
      },
      "source": [
        "## Data preparation for regression\n",
        "\n",
        "### Subtask:\n",
        "Restructure the data so that each financial year is a row, the columns represent the turnout of each individual material, and there is a column for the net material usage.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "417fe3a6"
      },
      "source": [
        "**Reasoning**:\n",
        "Restructure the data by transposing the relevant material turnout data, renaming columns, resetting the index, extracting and transposing the 'Total materials consumed' data, renaming its column, resetting its index, and finally merging the two transposed dataframes based on the financial year.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "id": "f70fed13",
        "outputId": "7e433f98-8bc7-4d5f-a94d-47c921f1f139"
      },
      "source": [
        "# Exclude non-financial year columns before transposing the material turnout data\n",
        "material_turnout_df = df.set_index('Material Name')[['FY 2021-22', 'FY 2022-23', 'FY 2023-24']].T\n",
        "\n",
        "# Rename the columns using the material names from the index\n",
        "material_turnout_df.columns = material_turnout_df.columns.tolist()\n",
        "\n",
        "# Reset the index and rename the index column to 'Financial_Year'\n",
        "material_turnout_df = material_turnout_df.reset_index().rename(columns={'index': 'Financial_Year'})\n",
        "\n",
        "# Extract the 'Total materials consumed' row from the original df\n",
        "total_consumed_df = df[df['Material Name'] == 'Total materials consumed'].set_index('Material Name')[['FY 2021-22', 'FY 2022-23', 'FY 2023-24']].T\n",
        "\n",
        "# Rename the column to 'Net_Material_Usage'\n",
        "total_consumed_df.columns = ['Net_Material_Usage']\n",
        "\n",
        "# Reset the index and rename the index column to 'Financial_Year'\n",
        "total_consumed_df = total_consumed_df.reset_index().rename(columns={'index': 'Financial_Year'})\n",
        "\n",
        "# Merge the two dataframes on 'Financial_Year'\n",
        "merged_df = pd.merge(material_turnout_df, total_consumed_df, on='Financial_Year')\n",
        "\n",
        "# Clean up the 'Financial_Year' column format\n",
        "merged_df['Financial_Year'] = merged_df['Financial_Year'].str.replace('FY ', '', regex=False)\n",
        "\n",
        "display(merged_df.head())"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Financial_Year    Naphtha Methanol Purchased propylene Purchased LPG  \\\n",
              "0        2021-22  16,23,240   22,535               2,403        10,844   \n",
              "1        2022-23  17,86,130   24,698                 714        33,603   \n",
              "2        2023-24  17,60,136   26,064               1,434        28,162   \n",
              "\n",
              "  Additives Catalyst Co-catalyst + chemicals Total raw materials Lubricants  \\\n",
              "0     2,664       59                     704           16,62,449        111   \n",
              "1     3,079       65                     795           18,49,085        190   \n",
              "2     2,995       61                     598           18,19,450        156   \n",
              "\n",
              "  Hexane Total associated materials PP bags Total packaging materials  \\\n",
              "0  2,632                      2,743   4,403                     4,403   \n",
              "1  2,468                      2,658   4,860                     4,860   \n",
              "2  2,391                      2,547   4,650                     4,650   \n",
              "\n",
              "  Total materials consumed Net_Material_Usage  \n",
              "0                16,69,595          16,69,595  \n",
              "1                18,56,603          18,56,603  \n",
              "2                18,26,647          18,26,647  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98b13f4b-01f2-4404-9cc7-9b65e992da8d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial_Year</th>\n",
              "      <th>Naphtha</th>\n",
              "      <th>Methanol</th>\n",
              "      <th>Purchased propylene</th>\n",
              "      <th>Purchased LPG</th>\n",
              "      <th>Additives</th>\n",
              "      <th>Catalyst</th>\n",
              "      <th>Co-catalyst + chemicals</th>\n",
              "      <th>Total raw materials</th>\n",
              "      <th>Lubricants</th>\n",
              "      <th>Hexane</th>\n",
              "      <th>Total associated materials</th>\n",
              "      <th>PP bags</th>\n",
              "      <th>Total packaging materials</th>\n",
              "      <th>Total materials consumed</th>\n",
              "      <th>Net_Material_Usage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-22</td>\n",
              "      <td>16,23,240</td>\n",
              "      <td>22,535</td>\n",
              "      <td>2,403</td>\n",
              "      <td>10,844</td>\n",
              "      <td>2,664</td>\n",
              "      <td>59</td>\n",
              "      <td>704</td>\n",
              "      <td>16,62,449</td>\n",
              "      <td>111</td>\n",
              "      <td>2,632</td>\n",
              "      <td>2,743</td>\n",
              "      <td>4,403</td>\n",
              "      <td>4,403</td>\n",
              "      <td>16,69,595</td>\n",
              "      <td>16,69,595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-23</td>\n",
              "      <td>17,86,130</td>\n",
              "      <td>24,698</td>\n",
              "      <td>714</td>\n",
              "      <td>33,603</td>\n",
              "      <td>3,079</td>\n",
              "      <td>65</td>\n",
              "      <td>795</td>\n",
              "      <td>18,49,085</td>\n",
              "      <td>190</td>\n",
              "      <td>2,468</td>\n",
              "      <td>2,658</td>\n",
              "      <td>4,860</td>\n",
              "      <td>4,860</td>\n",
              "      <td>18,56,603</td>\n",
              "      <td>18,56,603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023-24</td>\n",
              "      <td>17,60,136</td>\n",
              "      <td>26,064</td>\n",
              "      <td>1,434</td>\n",
              "      <td>28,162</td>\n",
              "      <td>2,995</td>\n",
              "      <td>61</td>\n",
              "      <td>598</td>\n",
              "      <td>18,19,450</td>\n",
              "      <td>156</td>\n",
              "      <td>2,391</td>\n",
              "      <td>2,547</td>\n",
              "      <td>4,650</td>\n",
              "      <td>4,650</td>\n",
              "      <td>18,26,647</td>\n",
              "      <td>18,26,647</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98b13f4b-01f2-4404-9cc7-9b65e992da8d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98b13f4b-01f2-4404-9cc7-9b65e992da8d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98b13f4b-01f2-4404-9cc7-9b65e992da8d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1df5ba14-01ca-4bd7-b026-a0d8e60e8918\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1df5ba14-01ca-4bd7-b026-a0d8e60e8918')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1df5ba14-01ca-4bd7-b026-a0d8e60e8918 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(merged_df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Financial_Year\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2021-22\",\n          \"2022-23\",\n          \"2023-24\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Naphtha\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,23,240\",\n          \"17,86,130\",\n          \"17,60,136\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Methanol\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"22,535\",\n          \"24,698\",\n          \"26,064\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased propylene\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,403\",\n          \"714\",\n          \"1,434\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased LPG\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"10,844\",\n          \"33,603\",\n          \"28,162\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Additives\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,664\",\n          \"3,079\",\n          \"2,995\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Catalyst\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"59\",\n          \"65\",\n          \"61\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Co-catalyst + chemicals\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"704\",\n          \"795\",\n          \"598\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total raw materials\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,62,449\",\n          \"18,49,085\",\n          \"18,19,450\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lubricants\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"111\",\n          \"190\",\n          \"156\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hexane\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,632\",\n          \"2,468\",\n          \"2,391\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total associated materials\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,743\",\n          \"2,658\",\n          \"2,547\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PP bags\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4,403\",\n          \"4,860\",\n          \"4,650\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total packaging materials\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4,403\",\n          \"4,860\",\n          \"4,650\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total materials consumed\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,69,595\",\n          \"18,56,603\",\n          \"18,26,647\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Net_Material_Usage\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,69,595\",\n          \"18,56,603\",\n          \"18,26,647\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63c9d2e1"
      },
      "source": [
        "## Define predictors and response\n",
        "\n",
        "### Subtask:\n",
        "Identify the columns that will be used as predictors (material turnouts) and the column that will be the response (net material usage).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4e196e2f"
      },
      "source": [
        "**Reasoning**:\n",
        "Create a list of predictor columns by excluding the 'Financial_Year' and 'Net_Material_Usage' columns from the `merged_df` columns and store the response column name in a variable.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f636717f",
        "outputId": "cc79487d-5716-467f-fc61-ccdadf0dd845"
      },
      "source": [
        "# Create a list of predictor columns excluding 'Financial_Year' and 'Net_Material_Usage'\n",
        "predictor_columns = [col for col in merged_df.columns if col not in ['Financial_Year', 'Net_Material_Usage']]\n",
        "\n",
        "# Define the response column\n",
        "response_column = 'Net_Material_Usage'\n",
        "\n",
        "print(\"Predictor columns:\", predictor_columns)\n",
        "print(\"Response column:\", response_column)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictor columns: ['Naphtha', 'Methanol', 'Purchased propylene', 'Purchased LPG', 'Additives', 'Catalyst', 'Co-catalyst + chemicals', 'Total raw materials', 'Lubricants', 'Hexane', 'Total associated materials', 'PP bags', 'Total packaging materials', 'Total materials consumed']\n",
            "Response column: Net_Material_Usage\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ccecfb2"
      },
      "source": [
        "## Perform regression analysis\n",
        "\n",
        "### Subtask:\n",
        "Apply a suitable regression model to determine the relationship between the material turnouts and the net material usage.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "00de521a"
      },
      "source": [
        "**Reasoning**:\n",
        "Apply a suitable regression model to determine the relationship between the material turnouts and the net material usage by preparing the data, instantiating and fitting a LinearRegression model, and printing the coefficients and intercept.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d4422f47",
        "outputId": "23737160-0f19-41f6-f94f-e0882a6bc56f"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Create DataFrame X for predictor variables\n",
        "X = merged_df[predictor_columns].copy()\n",
        "\n",
        "# Convert predictor columns to numeric, handling potential commas\n",
        "for col in predictor_columns:\n",
        "    X[col] = X[col].astype(str).str.replace(',', '', regex=False).astype(float)\n",
        "\n",
        "# Create Series y for the response variable\n",
        "y = merged_df[response_column].copy()\n",
        "\n",
        "# Convert response column to numeric, handling potential commas\n",
        "y = y.astype(str).str.replace(',', '', regex=False).astype(float)\n",
        "\n",
        "# Instantiate a LinearRegression object\n",
        "model = LinearRegression()\n",
        "\n",
        "# Fit the regression model\n",
        "model.fit(X, y)\n",
        "\n",
        "# Print the coefficients and intercept\n",
        "print(\"Coefficients:\", model.coef_)\n",
        "print(\"Intercept:\", model.intercept_)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [ 3.14053691e-01 -9.40557031e-03 -6.83028097e-03  5.82325208e-02\n",
            "  9.41139520e-04  3.57063861e-05  1.62316942e-03  3.58658972e-01\n",
            "  3.22039062e-04  5.02331107e-04  8.24370169e-04  1.96858308e-03\n",
            "  1.96858308e-03  3.61451925e-01]\n",
            "Intercept: -40347.801540021086\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b54f35d5"
      },
      "source": [
        "## Analyze and interpret results\n",
        "\n",
        "### Subtask:\n",
        "Examine the output of the regression model to understand which material turnouts are significant predictors and how they relate to the net material usage.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "23e01111"
      },
      "source": [
        "**Reasoning**:\n",
        "Print the coefficients and intercept from the fitted model, interpret their meaning, discuss the impact of material turnouts based on coefficient magnitude, and acknowledge the limitations of the analysis due to the small number of data points.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b291908e",
        "outputId": "85c76eef-6ef4-45c9-c29d-65b5755a97f1"
      },
      "source": [
        "# Print the coefficients and intercept (already done in the previous step, but re-printing for clarity)\n",
        "print(\"Coefficients:\", model.coef_)\n",
        "print(\"Intercept:\", model.intercept_)\n",
        "\n",
        "# Interpretation and discussion\n",
        "print(\"\\n--- Interpretation ---\")\n",
        "print(f\"Intercept: {model.intercept_}\")\n",
        "print(\"The intercept represents the estimated net material usage when all material turnouts are zero. In this context, with only three data points and the nature of material usage, the intercept might not have a direct, meaningful physical interpretation.\")\n",
        "\n",
        "print(\"\\nCoefficients:\")\n",
        "for material, coef in zip(predictor_columns, model.coef_):\n",
        "    print(f\"- {material}: {coef}\")\n",
        "    print(f\"  Interpretation: For every one-unit increase in the turnout of {material}, the net material usage is estimated to change by {coef} units, assuming all other material turnouts remain constant.\")\n",
        "\n",
        "print(\"\\n--- Impact Analysis ---\")\n",
        "# Create a mapping of material names to their absolute coefficient values\n",
        "coef_magnitudes = {material: abs(coef) for material, coef in zip(predictor_columns, model.coef_)}\n",
        "\n",
        "# Sort materials by the magnitude of their coefficients in descending order\n",
        "sorted_materials_by_impact = sorted(coef_magnitudes, key=coef_magnitudes.get, reverse=True)\n",
        "\n",
        "print(\"Materials with the largest estimated impact on Net Material Usage (based on coefficient magnitude):\")\n",
        "for material in sorted_materials_by_impact:\n",
        "    print(f\"- {material} (Coefficient Magnitude: {coef_magnitudes[material]:.2f})\")\n",
        "\n",
        "print(\"\\n--- Limitations ---\")\n",
        "print(\"It is crucial to acknowledge the significant limitations of this analysis due to having only three data points (FY 2021-22, FY 2022-23, FY 2023-24).\")\n",
        "print(\"With so few observations:\")\n",
        "print(\"1. The statistical significance of the coefficients is highly unreliable and should not be interpreted in the standard way (e.g., using p-values).\")\n",
        "print(\"2. The model is likely to overfit the data, meaning it may not generalize well to new financial years.\")\n",
        "print(\"3. The calculated coefficients and intercept are highly sensitive to these specific three data points and may not accurately reflect the true underlying relationships.\")\n",
        "print(\"4. Time series decomposition is also not meaningful with only 3 points.\")\n",
        "print(\"Therefore, the interpretations of coefficients and impact should be treated with extreme caution and are more indicative of patterns within these three years rather than robust, generalizable findings.\")"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [ 3.14053691e-01 -9.40557031e-03 -6.83028097e-03  5.82325208e-02\n",
            "  9.41139520e-04  3.57063861e-05  1.62316942e-03  3.58658972e-01\n",
            "  3.22039062e-04  5.02331107e-04  8.24370169e-04  1.96858308e-03\n",
            "  1.96858308e-03  3.61451925e-01]\n",
            "Intercept: -40347.801540021086\n",
            "\n",
            "--- Interpretation ---\n",
            "Intercept: -40347.801540021086\n",
            "The intercept represents the estimated net material usage when all material turnouts are zero. In this context, with only three data points and the nature of material usage, the intercept might not have a direct, meaningful physical interpretation.\n",
            "\n",
            "Coefficients:\n",
            "- Naphtha: 0.3140536912184244\n",
            "  Interpretation: For every one-unit increase in the turnout of Naphtha, the net material usage is estimated to change by 0.3140536912184244 units, assuming all other material turnouts remain constant.\n",
            "- Methanol: -0.009405570313852156\n",
            "  Interpretation: For every one-unit increase in the turnout of Methanol, the net material usage is estimated to change by -0.009405570313852156 units, assuming all other material turnouts remain constant.\n",
            "- Purchased propylene: -0.00683028096887653\n",
            "  Interpretation: For every one-unit increase in the turnout of Purchased propylene, the net material usage is estimated to change by -0.00683028096887653 units, assuming all other material turnouts remain constant.\n",
            "- Purchased LPG: 0.05823252083951369\n",
            "  Interpretation: For every one-unit increase in the turnout of Purchased LPG, the net material usage is estimated to change by 0.05823252083951369 units, assuming all other material turnouts remain constant.\n",
            "- Additives: 0.000941139519619337\n",
            "  Interpretation: For every one-unit increase in the turnout of Additives, the net material usage is estimated to change by 0.000941139519619337 units, assuming all other material turnouts remain constant.\n",
            "- Catalyst: 3.570638608644034e-05\n",
            "  Interpretation: For every one-unit increase in the turnout of Catalyst, the net material usage is estimated to change by 3.570638608644034e-05 units, assuming all other material turnouts remain constant.\n",
            "- Co-catalyst + chemicals: 0.0016231694223214212\n",
            "  Interpretation: For every one-unit increase in the turnout of Co-catalyst + chemicals, the net material usage is estimated to change by 0.0016231694223214212 units, assuming all other material turnouts remain constant.\n",
            "- Total raw materials: 0.35865897172153693\n",
            "  Interpretation: For every one-unit increase in the turnout of Total raw materials, the net material usage is estimated to change by 0.35865897172153693 units, assuming all other material turnouts remain constant.\n",
            "- Lubricants: 0.00032203906211714605\n",
            "  Interpretation: For every one-unit increase in the turnout of Lubricants, the net material usage is estimated to change by 0.00032203906211714605 units, assuming all other material turnouts remain constant.\n",
            "- Hexane: 0.0005023311065610594\n",
            "  Interpretation: For every one-unit increase in the turnout of Hexane, the net material usage is estimated to change by 0.0005023311065610594 units, assuming all other material turnouts remain constant.\n",
            "- Total associated materials: 0.0008243701686782056\n",
            "  Interpretation: For every one-unit increase in the turnout of Total associated materials, the net material usage is estimated to change by 0.0008243701686782056 units, assuming all other material turnouts remain constant.\n",
            "- PP bags: 0.0019685830843345913\n",
            "  Interpretation: For every one-unit increase in the turnout of PP bags, the net material usage is estimated to change by 0.0019685830843345913 units, assuming all other material turnouts remain constant.\n",
            "- Total packaging materials: 0.0019685830843345913\n",
            "  Interpretation: For every one-unit increase in the turnout of Total packaging materials, the net material usage is estimated to change by 0.0019685830843345913 units, assuming all other material turnouts remain constant.\n",
            "- Total materials consumed: 0.3614519249745498\n",
            "  Interpretation: For every one-unit increase in the turnout of Total materials consumed, the net material usage is estimated to change by 0.3614519249745498 units, assuming all other material turnouts remain constant.\n",
            "\n",
            "--- Impact Analysis ---\n",
            "Materials with the largest estimated impact on Net Material Usage (based on coefficient magnitude):\n",
            "- Total materials consumed (Coefficient Magnitude: 0.36)\n",
            "- Total raw materials (Coefficient Magnitude: 0.36)\n",
            "- Naphtha (Coefficient Magnitude: 0.31)\n",
            "- Purchased LPG (Coefficient Magnitude: 0.06)\n",
            "- Methanol (Coefficient Magnitude: 0.01)\n",
            "- Purchased propylene (Coefficient Magnitude: 0.01)\n",
            "- PP bags (Coefficient Magnitude: 0.00)\n",
            "- Total packaging materials (Coefficient Magnitude: 0.00)\n",
            "- Co-catalyst + chemicals (Coefficient Magnitude: 0.00)\n",
            "- Additives (Coefficient Magnitude: 0.00)\n",
            "- Total associated materials (Coefficient Magnitude: 0.00)\n",
            "- Hexane (Coefficient Magnitude: 0.00)\n",
            "- Lubricants (Coefficient Magnitude: 0.00)\n",
            "- Catalyst (Coefficient Magnitude: 0.00)\n",
            "\n",
            "--- Limitations ---\n",
            "It is crucial to acknowledge the significant limitations of this analysis due to having only three data points (FY 2021-22, FY 2022-23, FY 2023-24).\n",
            "With so few observations:\n",
            "1. The statistical significance of the coefficients is highly unreliable and should not be interpreted in the standard way (e.g., using p-values).\n",
            "2. The model is likely to overfit the data, meaning it may not generalize well to new financial years.\n",
            "3. The calculated coefficients and intercept are highly sensitive to these specific three data points and may not accurately reflect the true underlying relationships.\n",
            "4. Time series decomposition is also not meaningful with only 3 points.\n",
            "Therefore, the interpretations of coefficients and impact should be treated with extreme caution and are more indicative of patterns within these three years rather than robust, generalizable findings.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a76ada9a"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   A linear regression model was fitted to predict Net Material Usage based on individual material turnouts for FY21-22, FY22-23, and FY23-24.\n",
        "*   The model provided coefficients for each material turnout, indicating the estimated change in Net Material Usage for a one-unit increase in that material's turnout, assuming other turnouts remain constant.\n",
        "*   The materials with the largest estimated impact on Net Material Usage based on the magnitude of their coefficients were \"Total materials consumed\" and \"Total raw materials\".\n",
        "*   The analysis is severely limited by the small sample size of only three financial years, meaning the statistical significance of coefficients is unreliable, the model is prone to overfitting, and the results may not generalize well beyond these three years.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   Given the severe limitations due to the small sample size, the results of this regression analysis should be interpreted with extreme caution.\n",
        "*   To obtain more reliable and generalizable insights, a larger dataset spanning more financial years would be required to perform a meaningful time series decomposition and regression analysis.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4373ae55"
      },
      "source": [
        "## Data preparation for regression\n",
        "\n",
        "### Subtask:\n",
        "Restructure the data so that each financial year is a row, the columns represent the turnout of each individual material, and there is a column for the net material usage."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f8b7114b"
      },
      "source": [
        "**Reasoning**:\n",
        "Restructure the data by transposing the relevant material turnout data, renaming columns, resetting the index, extracting and transposing the 'Total materials consumed' data, renaming its column, resetting its index, and finally merging the two transposed dataframes based on the financial year."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "id": "e2235486",
        "outputId": "2c8261f0-0cce-4204-9427-9fd24a3e5257"
      },
      "source": [
        "# Exclude non-financial year columns before transposing the material turnout data\n",
        "material_turnout_df = df.set_index('Material Name')[['FY 2021-22', 'FY 2022-23', 'FY 2023-24']].T\n",
        "\n",
        "# Rename the columns using the material names from the index\n",
        "material_turnout_df.columns = material_turnout_df.columns.tolist()\n",
        "\n",
        "# Reset the index and rename the index column to 'Financial_Year'\n",
        "material_turnout_df = material_turnout_df.reset_index().rename(columns={'index': 'Financial_Year'})\n",
        "\n",
        "# Extract the 'Total materials consumed' row from the original df\n",
        "total_consumed_df = df[df['Material Name'] == 'Total materials consumed'].set_index('Material Name')[['FY 2021-22', 'FY 2022-23', 'FY 2023-24']].T\n",
        "\n",
        "# Rename the column to 'Net_Material_Usage'\n",
        "total_consumed_df.columns = ['Net_Material_Usage']\n",
        "\n",
        "# Reset the index and rename the index column to 'Financial_Year'\n",
        "total_consumed_df = total_consumed_df.reset_index().rename(columns={'index': 'Financial_Year'})\n",
        "\n",
        "# Merge the two dataframes on 'Financial_Year'\n",
        "merged_df = pd.merge(material_turnout_df, total_consumed_df, on='Financial_Year')\n",
        "\n",
        "# Clean up the 'Financial_Year' column format\n",
        "merged_df['Financial_Year'] = merged_df['Financial_Year'].str.replace('FY ', '', regex=False)\n",
        "\n",
        "display(merged_df.head())"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Financial_Year    Naphtha Methanol Purchased propylene Purchased LPG  \\\n",
              "0        2021-22  16,23,240   22,535               2,403        10,844   \n",
              "1        2022-23  17,86,130   24,698                 714        33,603   \n",
              "2        2023-24  17,60,136   26,064               1,434        28,162   \n",
              "\n",
              "  Additives Catalyst Co-catalyst + chemicals Total raw materials Lubricants  \\\n",
              "0     2,664       59                     704           16,62,449        111   \n",
              "1     3,079       65                     795           18,49,085        190   \n",
              "2     2,995       61                     598           18,19,450        156   \n",
              "\n",
              "  Hexane Total associated materials PP bags Total packaging materials  \\\n",
              "0  2,632                      2,743   4,403                     4,403   \n",
              "1  2,468                      2,658   4,860                     4,860   \n",
              "2  2,391                      2,547   4,650                     4,650   \n",
              "\n",
              "  Total materials consumed Net_Material_Usage  \n",
              "0                16,69,595          16,69,595  \n",
              "1                18,56,603          18,56,603  \n",
              "2                18,26,647          18,26,647  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f19a28f3-c5f5-4885-9d32-b655cba5afe3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial_Year</th>\n",
              "      <th>Naphtha</th>\n",
              "      <th>Methanol</th>\n",
              "      <th>Purchased propylene</th>\n",
              "      <th>Purchased LPG</th>\n",
              "      <th>Additives</th>\n",
              "      <th>Catalyst</th>\n",
              "      <th>Co-catalyst + chemicals</th>\n",
              "      <th>Total raw materials</th>\n",
              "      <th>Lubricants</th>\n",
              "      <th>Hexane</th>\n",
              "      <th>Total associated materials</th>\n",
              "      <th>PP bags</th>\n",
              "      <th>Total packaging materials</th>\n",
              "      <th>Total materials consumed</th>\n",
              "      <th>Net_Material_Usage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-22</td>\n",
              "      <td>16,23,240</td>\n",
              "      <td>22,535</td>\n",
              "      <td>2,403</td>\n",
              "      <td>10,844</td>\n",
              "      <td>2,664</td>\n",
              "      <td>59</td>\n",
              "      <td>704</td>\n",
              "      <td>16,62,449</td>\n",
              "      <td>111</td>\n",
              "      <td>2,632</td>\n",
              "      <td>2,743</td>\n",
              "      <td>4,403</td>\n",
              "      <td>4,403</td>\n",
              "      <td>16,69,595</td>\n",
              "      <td>16,69,595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-23</td>\n",
              "      <td>17,86,130</td>\n",
              "      <td>24,698</td>\n",
              "      <td>714</td>\n",
              "      <td>33,603</td>\n",
              "      <td>3,079</td>\n",
              "      <td>65</td>\n",
              "      <td>795</td>\n",
              "      <td>18,49,085</td>\n",
              "      <td>190</td>\n",
              "      <td>2,468</td>\n",
              "      <td>2,658</td>\n",
              "      <td>4,860</td>\n",
              "      <td>4,860</td>\n",
              "      <td>18,56,603</td>\n",
              "      <td>18,56,603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023-24</td>\n",
              "      <td>17,60,136</td>\n",
              "      <td>26,064</td>\n",
              "      <td>1,434</td>\n",
              "      <td>28,162</td>\n",
              "      <td>2,995</td>\n",
              "      <td>61</td>\n",
              "      <td>598</td>\n",
              "      <td>18,19,450</td>\n",
              "      <td>156</td>\n",
              "      <td>2,391</td>\n",
              "      <td>2,547</td>\n",
              "      <td>4,650</td>\n",
              "      <td>4,650</td>\n",
              "      <td>18,26,647</td>\n",
              "      <td>18,26,647</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f19a28f3-c5f5-4885-9d32-b655cba5afe3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f19a28f3-c5f5-4885-9d32-b655cba5afe3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f19a28f3-c5f5-4885-9d32-b655cba5afe3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-374691ee-d61d-4eb6-9c74-50bb350c992a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-374691ee-d61d-4eb6-9c74-50bb350c992a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-374691ee-d61d-4eb6-9c74-50bb350c992a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(merged_df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Financial_Year\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2021-22\",\n          \"2022-23\",\n          \"2023-24\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Naphtha\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,23,240\",\n          \"17,86,130\",\n          \"17,60,136\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Methanol\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"22,535\",\n          \"24,698\",\n          \"26,064\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased propylene\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,403\",\n          \"714\",\n          \"1,434\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased LPG\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"10,844\",\n          \"33,603\",\n          \"28,162\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Additives\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,664\",\n          \"3,079\",\n          \"2,995\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Catalyst\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"59\",\n          \"65\",\n          \"61\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Co-catalyst + chemicals\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"704\",\n          \"795\",\n          \"598\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total raw materials\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,62,449\",\n          \"18,49,085\",\n          \"18,19,450\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lubricants\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"111\",\n          \"190\",\n          \"156\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hexane\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,632\",\n          \"2,468\",\n          \"2,391\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total associated materials\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2,743\",\n          \"2,658\",\n          \"2,547\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PP bags\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4,403\",\n          \"4,860\",\n          \"4,650\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total packaging materials\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"4,403\",\n          \"4,860\",\n          \"4,650\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total materials consumed\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,69,595\",\n          \"18,56,603\",\n          \"18,26,647\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Net_Material_Usage\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"16,69,595\",\n          \"18,56,603\",\n          \"18,26,647\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2fa65854"
      },
      "source": [
        "## Define predictors and response\n",
        "\n",
        "### Subtask:\n",
        "Identify the columns that will be used as predictors (material turnouts) and the column that will be the response (net material usage)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d6ac54eb"
      },
      "source": [
        "**Reasoning**:\n",
        "Create a list of predictor columns by excluding the 'Financial_Year' and 'Net_Material_Usage' columns from the `merged_df` columns and store the response column name in a variable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d514160f",
        "outputId": "bc6c3079-2c07-4a06-d34c-da34d2bbc54b"
      },
      "source": [
        "# Create a list of predictor columns excluding 'Financial_Year' and 'Net_Material_Usage'\n",
        "predictor_columns = [col for col in merged_df.columns if col not in ['Financial_Year', 'Net_Material_Usage']]\n",
        "\n",
        "# Define the response column\n",
        "response_column = 'Net_Material_Usage'\n",
        "\n",
        "print(\"Predictor columns:\", predictor_columns)\n",
        "print(\"Response column:\", response_column)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictor columns: ['Naphtha', 'Methanol', 'Purchased propylene', 'Purchased LPG', 'Additives', 'Catalyst', 'Co-catalyst + chemicals', 'Total raw materials', 'Lubricants', 'Hexane', 'Total associated materials', 'PP bags', 'Total packaging materials', 'Total materials consumed']\n",
            "Response column: Net_Material_Usage\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e4d94afe"
      },
      "source": [
        "## Perform regression analysis\n",
        "\n",
        "### Subtask:\n",
        "Apply a suitable regression model to determine the relationship between the material turnouts and the net material usage."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "add10d63"
      },
      "source": [
        "**Reasoning**:\n",
        "Apply a suitable regression model to determine the relationship between the material turnouts and the net material usage by preparing the data, instantiating and fitting a LinearRegression model, and printing the coefficients and intercept."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "13306896",
        "outputId": "46188c80-2a78-4e9f-ceb1-e189c354edd8"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Create DataFrame X for predictor variables\n",
        "X = merged_df[predictor_columns].copy()\n",
        "\n",
        "# Convert predictor columns to numeric, handling potential commas\n",
        "for col in predictor_columns:\n",
        "    X[col] = X[col].astype(str).str.replace(',', '', regex=False).astype(float)\n",
        "\n",
        "# Create Series y for the response variable\n",
        "y = merged_df[response_column].copy()\n",
        "\n",
        "# Convert response column to numeric, handling potential commas\n",
        "y = y.astype(str).str.replace(',', '', regex=False).astype(float)\n",
        "\n",
        "# Instantiate a LinearRegression object\n",
        "model = LinearRegression()\n",
        "\n",
        "# Fit the regression model\n",
        "model.fit(X, y)\n",
        "\n",
        "# Print the coefficients and intercept\n",
        "print(\"Coefficients:\", model.coef_)\n",
        "print(\"Intercept:\", model.intercept_)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [ 3.14053691e-01 -9.40557031e-03 -6.83028097e-03  5.82325208e-02\n",
            "  9.41139520e-04  3.57063861e-05  1.62316942e-03  3.58658972e-01\n",
            "  3.22039062e-04  5.02331107e-04  8.24370169e-04  1.96858308e-03\n",
            "  1.96858308e-03  3.61451925e-01]\n",
            "Intercept: -40347.801540021086\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "081c5e52"
      },
      "source": [
        "## Analyze and interpret results\n",
        "\n",
        "### Subtask:\n",
        "Examine the output of the regression model to understand which material turnouts are significant predictors and how they relate to the net material usage."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2ef36071"
      },
      "source": [
        "**Reasoning**:\n",
        "Print the coefficients and intercept from the fitted model, interpret their meaning, discuss the impact of material turnouts based on coefficient magnitude, and acknowledge the limitations of the analysis due to the small number of data points."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8f516811",
        "outputId": "c4f90a16-a6b3-42d1-ada5-8aea07c46d0d"
      },
      "source": [
        "# Print the coefficients and intercept (already done in the previous step, but re-printing for clarity)\n",
        "print(\"Coefficients:\", model.coef_)\n",
        "print(\"Intercept:\", model.intercept_)\n",
        "\n",
        "# Interpretation and discussion\n",
        "print(\"\\n--- Interpretation ---\")\n",
        "print(f\"Intercept: {model.intercept_}\")\n",
        "print(\"The intercept represents the estimated net material usage when all material turnouts are zero. In this context, with only three data points and the nature of material usage, the intercept might not have a direct, meaningful physical interpretation.\")\n",
        "\n",
        "print(\"\\nCoefficients:\")\n",
        "for material, coef in zip(predictor_columns, model.coef_):\n",
        "    print(f\"- {material}: {coef}\")\n",
        "    print(f\"  Interpretation: For every one-unit increase in the turnout of {material}, the net material usage is estimated to change by {coef} units, assuming all other material turnouts remain constant.\")\n",
        "\n",
        "print(\"\\n--- Impact Analysis ---\")\n",
        "# Create a mapping of material names to their absolute coefficient values\n",
        "coef_magnitudes = {material: abs(coef) for material, coef in zip(predictor_columns, model.coef_)}\n",
        "\n",
        "# Sort materials by the magnitude of their coefficients in descending order\n",
        "sorted_materials_by_impact = sorted(coef_magnitudes, key=coef_magnitudes.get, reverse=True)\n",
        "\n",
        "print(\"Materials with the largest estimated impact on Net Material Usage (based on coefficient magnitude):\")\n",
        "for material in sorted_materials_by_impact:\n",
        "    print(f\"- {material} (Coefficient Magnitude: {coef_magnitudes[material]:.2f})\")\n",
        "\n",
        "print(\"\\n--- Limitations ---\")\n",
        "print(\"It is crucial to acknowledge the significant limitations of this analysis due to having only three data points (FY 2021-22, FY 2022-23, FY 2023-24).\")\n",
        "print(\"With so few observations:\")\n",
        "print(\"1. The statistical significance of the coefficients is highly unreliable and should not be interpreted in the standard way (e.g., using p-values).\")\n",
        "print(\"2. The model is likely to overfit the data, meaning it may not generalize well to new financial years.\")\n",
        "print(\"3. The calculated coefficients and intercept are highly sensitive to these specific three data points and may not accurately reflect the true underlying relationships.\")\n",
        "print(\"4. Time series decomposition is also not meaningful with only 3 points.\")\n",
        "print(\"Therefore, the interpretations of coefficients and impact should be treated with extreme caution and are more indicative of patterns within these three years rather than robust, generalizable findings.\")"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [ 3.14053691e-01 -9.40557031e-03 -6.83028097e-03  5.82325208e-02\n",
            "  9.41139520e-04  3.57063861e-05  1.62316942e-03  3.58658972e-01\n",
            "  3.22039062e-04  5.02331107e-04  8.24370169e-04  1.96858308e-03\n",
            "  1.96858308e-03  3.61451925e-01]\n",
            "Intercept: -40347.801540021086\n",
            "\n",
            "--- Interpretation ---\n",
            "Intercept: -40347.801540021086\n",
            "The intercept represents the estimated net material usage when all material turnouts are zero. In this context, with only three data points and the nature of material usage, the intercept might not have a direct, meaningful physical interpretation.\n",
            "\n",
            "Coefficients:\n",
            "- Naphtha: 0.3140536912184244\n",
            "  Interpretation: For every one-unit increase in the turnout of Naphtha, the net material usage is estimated to change by 0.3140536912184244 units, assuming all other material turnouts remain constant.\n",
            "- Methanol: -0.009405570313852156\n",
            "  Interpretation: For every one-unit increase in the turnout of Methanol, the net material usage is estimated to change by -0.009405570313852156 units, assuming all other material turnouts remain constant.\n",
            "- Purchased propylene: -0.00683028096887653\n",
            "  Interpretation: For every one-unit increase in the turnout of Purchased propylene, the net material usage is estimated to change by -0.00683028096887653 units, assuming all other material turnouts remain constant.\n",
            "- Purchased LPG: 0.05823252083951369\n",
            "  Interpretation: For every one-unit increase in the turnout of Purchased LPG, the net material usage is estimated to change by 0.05823252083951369 units, assuming all other material turnouts remain constant.\n",
            "- Additives: 0.000941139519619337\n",
            "  Interpretation: For every one-unit increase in the turnout of Additives, the net material usage is estimated to change by 0.000941139519619337 units, assuming all other material turnouts remain constant.\n",
            "- Catalyst: 3.570638608644034e-05\n",
            "  Interpretation: For every one-unit increase in the turnout of Catalyst, the net material usage is estimated to change by 3.570638608644034e-05 units, assuming all other material turnouts remain constant.\n",
            "- Co-catalyst + chemicals: 0.0016231694223214212\n",
            "  Interpretation: For every one-unit increase in the turnout of Co-catalyst + chemicals, the net material usage is estimated to change by 0.0016231694223214212 units, assuming all other material turnouts remain constant.\n",
            "- Total raw materials: 0.35865897172153693\n",
            "  Interpretation: For every one-unit increase in the turnout of Total raw materials, the net material usage is estimated to change by 0.35865897172153693 units, assuming all other material turnouts remain constant.\n",
            "- Lubricants: 0.00032203906211714605\n",
            "  Interpretation: For every one-unit increase in the turnout of Lubricants, the net material usage is estimated to change by 0.00032203906211714605 units, assuming all other material turnouts remain constant.\n",
            "- Hexane: 0.0005023311065610594\n",
            "  Interpretation: For every one-unit increase in the turnout of Hexane, the net material usage is estimated to change by 0.0005023311065610594 units, assuming all other material turnouts remain constant.\n",
            "- Total associated materials: 0.0008243701686782056\n",
            "  Interpretation: For every one-unit increase in the turnout of Total associated materials, the net material usage is estimated to change by 0.0008243701686782056 units, assuming all other material turnouts remain constant.\n",
            "- PP bags: 0.0019685830843345913\n",
            "  Interpretation: For every one-unit increase in the turnout of PP bags, the net material usage is estimated to change by 0.0019685830843345913 units, assuming all other material turnouts remain constant.\n",
            "- Total packaging materials: 0.0019685830843345913\n",
            "  Interpretation: For every one-unit increase in the turnout of Total packaging materials, the net material usage is estimated to change by 0.0019685830843345913 units, assuming all other material turnouts remain constant.\n",
            "- Total materials consumed: 0.3614519249745498\n",
            "  Interpretation: For every one-unit increase in the turnout of Total materials consumed, the net material usage is estimated to change by 0.3614519249745498 units, assuming all other material turnouts remain constant.\n",
            "\n",
            "--- Impact Analysis ---\n",
            "Materials with the largest estimated impact on Net Material Usage (based on coefficient magnitude):\n",
            "- Total materials consumed (Coefficient Magnitude: 0.36)\n",
            "- Total raw materials (Coefficient Magnitude: 0.36)\n",
            "- Naphtha (Coefficient Magnitude: 0.31)\n",
            "- Purchased LPG (Coefficient Magnitude: 0.06)\n",
            "- Methanol (Coefficient Magnitude: 0.01)\n",
            "- Purchased propylene (Coefficient Magnitude: 0.01)\n",
            "- PP bags (Coefficient Magnitude: 0.00)\n",
            "- Total packaging materials (Coefficient Magnitude: 0.00)\n",
            "- Co-catalyst + chemicals (Coefficient Magnitude: 0.00)\n",
            "- Additives (Coefficient Magnitude: 0.00)\n",
            "- Total associated materials (Coefficient Magnitude: 0.00)\n",
            "- Hexane (Coefficient Magnitude: 0.00)\n",
            "- Lubricants (Coefficient Magnitude: 0.00)\n",
            "- Catalyst (Coefficient Magnitude: 0.00)\n",
            "\n",
            "--- Limitations ---\n",
            "It is crucial to acknowledge the significant limitations of this analysis due to having only three data points (FY 2021-22, FY 2022-23, FY 2023-24).\n",
            "With so few observations:\n",
            "1. The statistical significance of the coefficients is highly unreliable and should not be interpreted in the standard way (e.g., using p-values).\n",
            "2. The model is likely to overfit the data, meaning it may not generalize well to new financial years.\n",
            "3. The calculated coefficients and intercept are highly sensitive to these specific three data points and may not accurately reflect the true underlying relationships.\n",
            "4. Time series decomposition is also not meaningful with only 3 points.\n",
            "Therefore, the interpretations of coefficients and impact should be treated with extreme caution and are more indicative of patterns within these three years rather than robust, generalizable findings.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "59f65dd9"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "* A linear regression model was fitted to predict Net Material Usage based on individual material turnouts for FY21-22, FY22-23, and FY23-24.\n",
        "* The model provided coefficients for each material turnout, indicating the estimated change in Net Material Usage for a one-unit increase in that material's turnout, assuming other turnouts remain constant.\n",
        "* The materials with the largest estimated impact on Net Material Usage based on the magnitude of their coefficients were \"Total materials consumed\" and \"Total raw materials\".\n",
        "* The analysis is severely limited by the small sample size of only three financial years, meaning the statistical significance of coefficients is unreliable, the model is prone to overfitting, and the results may not generalize well beyond these three years.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "* Given the severe limitations due to the small sample size, the results of this regression analysis should be interpreted with extreme caution.\n",
        "* To obtain more reliable and generalizable insights, a larger dataset spanning more financial years would be required to perform a meaningful time series decomposition and regression analysis."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 737
        },
        "id": "38605f09",
        "outputId": "5da92998-000a-4b66-b907-aa3d5e7b4d49"
      },
      "source": [
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Assuming the DataFrame 'df' has columns for the financial years and material usage\n",
        "try:\n",
        "    # Restructure the DataFrame to a long format suitable for time series\n",
        "    # We need to melt the DataFrame to have years in one column and values in another\n",
        "    df_melted = df.melt(id_vars=['Material Name', 'Material Type', 'Unit'],\n",
        "                        value_vars=['FY 2021-22', 'FY 2022-23', 'FY 2023-24'],\n",
        "                        var_name='FY',\n",
        "                        value_name='Material_Usage')\n",
        "\n",
        "    # Convert 'Material_Usage' to numeric, handling potential commas\n",
        "    df_melted['Material_Usage'] = df_melted['Material_Usage'].str.replace(',', '', regex=False).astype(float)\n",
        "\n",
        "    # Create a numerical representation of the year for time series index\n",
        "    df_melted['Financial_Year_Sort'] = df_melted['FY'].replace({'FY 2021-22': 2022, 'FY 2022-23': 2023, 'FY 2023-24': 2024})\n",
        "\n",
        "    # For time series decomposition, we need a single series.\n",
        "    # The request mentions \"net yearwise material usage\".\n",
        "    # From the data, \"Total materials consumed\" seems to be the \"net yearwise material usage\".\n",
        "    # Filter for \"Total materials consumed\" and set the financial year as index\n",
        "    net_material_usage_df = df_melted[df_melted['Material Name'] == 'Total materials consumed'].copy()\n",
        "    net_material_usage_df = net_material_usage_df.sort_values('Financial_Year_Sort')\n",
        "    net_material_usage_df = net_material_usage_df.set_index('Financial_Year_Sort')\n",
        "\n",
        "    # Select the column for decomposition\n",
        "    time_series_data = net_material_usage_df['Material_Usage']\n",
        "\n",
        "    # Perform decomposition. With only 3 data points, additive decomposition is more suitable.\n",
        "    # The 'period' parameter is less meaningful with so few data points for seasonality.\n",
        "    # We'll perform a basic decomposition.\n",
        "    decomposition = seasonal_decompose(time_series_data, model='additive', period=1) # period=1 for yearly data\n",
        "\n",
        "    # Plot the decomposed components\n",
        "    fig = decomposition.plot()\n",
        "    fig.set_size_inches(10, 8)\n",
        "    plt.suptitle('Time Series Decomposition of Total Materials Consumed', y=1.02)\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found during processing. Details: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred during decomposition: {e}\")"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-21-1846716019.py:18: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
            "  df_melted['Financial_Year_Sort'] = df_melted['FY'].replace({'FY 2021-22': 2022, 'FY 2022-23': 2023, 'FY 2023-24': 2024})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 4 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA5QAAAMbCAYAAAAy0NpFAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAogZJREFUeJzs3Xd4VGXe//HPpE16QpIJoYSSQAJIU5QiJVFRRMVlsayuLk3Qx17AXXF/FhRlsWPfdRWx+6Dgs7LqYksoYgFkVYQkhBJ6JglJSE9mzu+PJEMmhTJOmEnyfl0XF8y5z8x8Z05C5pPvfc5tMgzDEAAAAAAAJ8nH0wUAAAAAANomAiUAAAAAwCUESgAAAACASwiUAAAAAACXECgBAAAAAC4hUAIAAAAAXEKgBAAAAAC4hEAJAAAAAHAJgRIAAAAA4BICJeBB06dPV69evTxdhsd09NffHqWmpio1NfWE9m0Lx7+kpESzZs1SXFycTCaT7rjjDk+XdFwncwzast/yOk0mkx588EG31oPfri38nwCgKQIl4GYmk+mE/qSlpXm61Gbt2rVLM2bMUGJiogIDAxUXF6dx48bpgQce8HRpbpGamuo4Bj4+PgoPD1dycrL+9Kc/6fPPP/d0ee3O/v379eCDD2rz5s2eLsUljz76qF5//XXdeOONevPNN/WnP/2pyT4PPvjgCX3Pn0j4+eabb/Tggw+qsLDQ/S+mkV69eslkMmn8+PHNjr/yyiuO2jds2HDSj38qX4unZWdn64YbblBCQoICAwMVHh6u0aNHa/HixSovL/d0eQDQqvw8XQDQ3rz55ptOt9944w19/vnnTbb3799fr7zyiux2+6ks75i2b9+us846S0FBQZo5c6Z69eqlAwcOaNOmTVq0aJHmz5/v1ufz1Ovv3r27Fi5cKEkqLS3V9u3btXz5cr311lu68sor9dZbb8nf3/+U19UerFq1yun2/v37NX/+fPXq1UtDhw51GvO2r//mfPXVVxo5cuQxf6EyZcoU9enTx3G7pKREN954o37/+99rypQpju2dO3c+7vN98803mj9/vqZPn67IyMjfVPuJCAwM1Ndff62DBw8qLi7Oaeztt99WYGCgKioqXHrs1n4tjb/WPOXf//63rrjiCpnNZk2dOlUDBw5UVVWV1q5dq7vvvltbtmzRP/7xD0+XCQCthkAJuNm1117rdPvbb7/V559/3mS7N3r66adVUlKizZs3q2fPnk5jubm5bnue0tJShYSEeCy0RURENDkef/vb33TbbbfpxRdfVK9evbRo0SKP1NbWBQQEnPC+bSG05+bmasCAAcfcZ/DgwRo8eLDjdl5enm688UYNHjzY67/vR48erR9++EHvv/++br/9dsf2vXv3as2aNfr973+vDz/80IMVNlVWVqbg4OCT+lprLTt37tRVV12lnj176quvvlKXLl0cYzfffLO2b9+uf//73x6sEABaH1NeAQ9qfL7Irl27ZDKZ9MQTT+iFF15QQkKCgoODdcEFF2jPnj0yDEMPP/ywunfvrqCgIP3ud79TQUFBk8f99NNPNXbsWIWEhCgsLEwXX3yxtmzZctx6srOz1b179yZhUpJiY2Ndep7p06crNDRU2dnZuuiiixQWFqZrrrmm2dcvSXa7Xc8884xOO+00BQYGqnPnzrrhhht0+PBhp/02bNigCRMmKCYmRkFBQerdu7dmzpx53NfYEl9fXz377LMaMGCAnn/+eRUVFTmNv/XWWxo2bJiCgoIUFRWlq666Snv27GnyON99950uuugiderUSSEhIRo8eLAWL17stM9XX33leN8iIyP1u9/9Tlu3bnXap34aZWZmpq699lpFRETIYrHovvvuk2EY2rNnj373u98pPDxccXFxevLJJ53un5aWJpPJpPfff1/33nuv4uLiFBISoksvvbTZupctW+Z4fTExMbr22mu1b98+p30OHjyoGTNmqHv37jKbzerSpYt+97vfadeuXY59Gp7XlpaWprPOOkuSNGPGDMf0yddff11S88e/tLRUc+bMUXx8vMxms5KTk/XEE0/IMAyn/Uwmk2655RZ99NFHGjhwoMxms0477TR99tlnTV5bc3Jzc3Xdddepc+fOCgwM1JAhQ7R06dIm79/OnTv173//21F7w9d6so533B988EHdfffdkqTevXs3ec4lS5bo3HPPVWxsrMxmswYMGKCXXnrJ5Xqk2g7llClT9M477zhtf/fdd9WpUydNmDChyX1++uknTZ8+3TG9My4uTjNnzlR+fv4JvxbpxL6nUlNTNXDgQG3cuFHjxo1TcHCw7r33XsdYw2nEVVVVuv/++zVs2DBFREQoJCREY8eO1ddff33c9+HIkSO644471KtXL5nNZsXGxur888/Xpk2bjnm/xx57TCUlJXr11VedwmS9Pn36OAX1mpoaPfzww0pMTJTZbFavXr107733qrKy0ul+vXr10iWXXKK1a9dq+PDhCgwMVEJCgt544w2n/aqrqzV//nz17dtXgYGBio6O1pgxY5ym77d0rqmnf/7Uf+8GBgZq4MCBWrFiRYvvMwDvRocS8EJvv/22qqqqdOutt6qgoECPPfaYrrzySp177rlKS0vTX/7yF23fvl3PPfec5s6dq9dee81x3zfffFPTpk3ThAkTtGjRIpWVlemll17SmDFj9OOPPx7zggc9e/bUF198oa+++krnnnvuMWs8meepqanRhAkTNGbMGD3xxBMKDg5u8XFvuOEGvf7665oxY4Zuu+027dy5U88//7x+/PFHrVu3Tv7+/srNzdUFF1wgi8Wie+65R5GRkdq1a5eWL19+wu9xc3x9fXX11Vfrvvvu09q1a3XxxRdLkh555BHdd999uvLKKzVr1ixZrVY999xzGjdunH788UfHdL7PP/9cl1xyibp06aLbb79dcXFx2rp1q1auXOn4UPnFF19o4sSJSkhI0IMPPqjy8nI999xzGj16tDZt2tTk+PzhD39Q//799be//U3//ve/tWDBAkVFRenvf/+7zj33XC1atEhvv/225s6dq7POOkvjxo1zuv8jjzwik8mkv/zlL8rNzdUzzzyj8ePHa/PmzQoKCpIkx/t91llnaeHChTp06JAWL16sdevWOb2+yy67TFu2bNGtt96qXr16KTc3V59//rlycnKa/brq37+/HnroId1///26/vrrNXbsWEnS2Wef3ez7bxiGLr30Un399de67rrrNHToUP3nP//R3XffrX379unpp5922n/t2rVavny5brrpJoWFhenZZ5/VZZddppycHEVHR7d4nMvLy5Wamqrt27frlltuUe/evbVs2TJNnz5dhYWFuv3229W/f3+9+eabuvPOO9W9e3fNmTNHkmSxWFp83GM5keM+ZcoUZWZm6t1339XTTz+tmJgYp+d86aWXdNppp+nSSy+Vn5+fPv74Y910002y2+26+eabXapLkv74xz/qggsuUHZ2thITEyVJ77zzji6//PJmu8iff/65duzYoRkzZiguLs4xpXPLli369ttvZTKZjvtaTvR7SpLy8/M1ceJEXXXVVbr22mtbnDpcXFysf/7zn7r66qs1e/ZsHTlyRK+++qomTJig77//vsmU64b+53/+Rx988IFuueUWDRgwQPn5+Vq7dq22bt2qM844o8X7ffzxx0pISGjxa7qxWbNmaenSpbr88ss1Z84cfffdd1q4cKG2bt3aJFBt375dl19+ua677jpNmzZNr732mqZPn65hw4bptNNOk1Qb3BcuXKhZs2Zp+PDhKi4u1oYNG7Rp0yadf/75J1RTY6fi58+qVat02WWXacCAAVq4cKHy8/Mdv6wC0AYZAFrVzTffbLT0rTZt2jSjZ8+ejts7d+40JBkWi8UoLCx0bJ83b54hyRgyZIhRXV3t2H711VcbAQEBRkVFhWEYhnHkyBEjMjLSmD17ttPzHDx40IiIiGiyvbFffvnFCAoKMiQZQ4cONW6//Xbjo48+MkpLS532O5nnmTZtmiHJuOeee477+tesWWNIMt5++22n/T777DOn7StWrDAkGT/88MMxX09zUlJSjNNOO63F8frHXrx4sWEYhrFr1y7D19fXeOSRR5z2+/nnnw0/Pz/H9pqaGqN3795Gz549jcOHDzvta7fbHf8eOnSoERsba+Tn5zu2/fe//zV8fHyMqVOnOrY98MADhiTj+uuvd2yrqakxunfvbphMJuNvf/ubY/vhw4eNoKAgY9q0aY5tX3/9tSHJ6Natm1FcXOzY/r//+79Or6+qqsqIjY01Bg4caJSXlzv2W7lypSHJuP/++x3PIcl4/PHHW3zvDKP2/U1JSXHc/uGHHwxJxpIlS5rs2/j4f/TRR4YkY8GCBU77XX755YbJZDK2b9/u2CbJCAgIcNr23//+15BkPPfcc8es8ZlnnjEkGW+99ZZjW1VVlTFq1CgjNDTU6f3q2bOncfHFFx/z8RqzWq2GJOOBBx5wbDvR4/74448bkoydO3c2edyysrIm2yZMmGAkJCQ4bWt8DFpS/9pqamqMuLg44+GHHzYMwzB+/fVXQ5KRnp5uLFmypMn3WnN1vPvuu4YkY/Xq1cd9LSf6PVX/WiQZL7/8cpPnbPw6a2pqjMrKSqd9Dh8+bHTu3NmYOXOm0/bGxyciIsK4+eabmzzHsRQVFRmSjN/97ncntP/mzZsNScasWbOcts+dO9eQZHz11VeObT179mzyfubm5hpms9mYM2eOY9uQIUOO+/XZ0teDJ3/+DB061OjSpYvT86xatcqQ5FQTgLaBKa+AF7riiisUERHhuD1ixAhJtedn+vn5OW2vqqpyTE38/PPPVVhYqKuvvlp5eXmOP76+vhoxYsRxp36ddtpp2rx5s6699lrt2rVLixcv1uTJk9W5c2e98sorjv1ceZ4bb7zxuK972bJlioiI0Pnnn+/0uMOGDVNoaKjjceu7FytXrlR1dfVxH/dkhIaGSqqdAidJy5cvl91u15VXXulUU1xcnPr27euo6ccff9TOnTt1xx13NLkAiclkkiQdOHBAmzdv1vTp0xUVFeUYHzx4sM4//3x98sknTeqZNWuW49++vr4688wzZRiGrrvuOsf2yMhIJScna8eOHU3uP3XqVIWFhTluX3755erSpYvjuTZs2KDc3FzddNNNCgwMdOx38cUXq1+/fo7zv4KCghQQEKC0tLQm04/d5ZNPPpGvr69uu+02p+1z5syRYRj69NNPnbaPHz/e0VGTat/H8PDwZt+Hxs8TFxenq6++2rHN399ft912m0pKSpSenu6GV3OUK8e9OfUdZUkqKipSXl6eUlJStGPHjiZTtE+Gr6+vrrzySr377ruSajtU8fHxjo7yseqoqKhQXl6eRo4cKUnHnSIqnfj3VD2z2awZM2ac0OuoP6/SbreroKBANTU1OvPMM49bV2RkpL777jvt37//uM9Tr7i4WJKcvr+Opf4433XXXU7b67vfjc+1HDBggNMxsFgsTb7PIyMjtWXLFmVlZZ1w3cfT2j9/6r8fpk2b5vQ8559//nHPVwbgnZjyCnihHj16ON2u/6EbHx/f7Pb6D/j1Hypamq4aHh5+3OdOSkrSm2++KZvNpl9//VUrV67UY489puuvv169e/fW+PHjT/p5/Pz8TmgqU1ZWloqKipo9X1M6emGglJQUXXbZZZo/f76efvpppaamavLkyfrjH/8os9l83Oc5lpKSEklHPyRmZWXJMAz17du32f3rpwRmZ2dLkgYOHNjiY+/evVuSlJyc3GSsf//++s9//uO4YFG95r4WAgMDHVMIG25veA5bvcZ1m0wm9enTx3Eu27Fq6tevn9auXSup9kP9okWLNGfOHHXu3FkjR47UJZdcoqlTpza5Oqirdu/era5duzb5gN6/f3+nWus1fm8kqVOnTscNvLt371bfvn3l4+P8O9WWnue3cuW4N2fdunV64IEHtH79epWVlTmNFRUVOX04P1l//OMf9eyzz+q///2v3nnnHV111VWOX4Q0VlBQoPnz5+u9995rcrGuEwm2J/o9Va9bt24nfAGepUuX6sknn9S2bducftnUu3fvY97vscce07Rp0xQfH69hw4bpoosu0tSpU5WQkNDifer/n6v/5dPx7N69Wz4+Pk5XBJakuLg4RUZGuvT1/dBDD+l3v/udkpKSNHDgQF144YX605/+5HSRqJPV2j9/6l9nc8c/OTn5hH4pAcC7ECgBL+Tr63tS2426C5bUL8Hw5ptvNvshv+Fvl0+khkGDBmnQoEEaNWqUzjnnHL399tsaP378ST+P2Wxu8uG9OXa7XbGxsXr77bebHa8//8pkMumDDz7Qt99+q48//lj/+c9/NHPmTD355JP69ttvHV1GV/zyyy+S5PjQZ7fbZTKZ9Omnnzb7/v+W5zoRzT3n8b4OWssdd9yhSZMm6aOPPtJ//vMf3XfffVq4cKG++uornX766a363M3x1PvgCdnZ2TrvvPPUr18/PfXUU4qPj1dAQIA++eQTPf300795+ZURI0YoMTFRd9xxh3bu3Kk//vGPLe575ZVX6ptvvtHdd9+toUOHKjQ0VHa7XRdeeOEJ1XGy31MNO6LH8tZbb2n69OmaPHmy7r77bsXGxsrX11cLFy50/MLnWK9p7NixWrFihVatWqXHH39cixYt0vLlyzVx4sRm7xMeHq6uXbs6/s84US0F9cZO5Ot73Lhxys7O1v/93/9p1apV+uc//6mnn35aL7/8smN2g8lkavZ7wmazndTznsqfPwDaFr67gXakfvpfbGxsi4uVu+LMM8+UVDtVqTWfJzExUV988YVGjx59Qh8iR44cqZEjR+qRRx7RO++8o2uuuUbvvfee0zTRk2Gz2fTOO+8oODhYY8aMcdRkGIZ69+6tpKSkY9Yu1QbSlt6T+qvnZmRkNBnbtm2bYmJijtulOlmNp8IZhqHt27c7OhgNa2rcWcjIyGhyxd/ExETNmTNHc+bMUVZWloYOHaonn3xSb731VrPPf6Ifnutr+eKLL3TkyBGnLuW2bducav2tevbsqZ9++kl2u93pFx3ufp6Gzyed2HFv6f36+OOPVVlZqX/9619OHaQTuYLpibr66qu1YMEC9e/fv8UL2Bw+fFhffvml5s+fr/vvv9+xvbkply29lhP9njpZH3zwgRISErR8+XKn5z7WGqINdenSRTfddJNuuukm5ebm6owzztAjjzzSYqCUpEsuuUT/+Mc/tH79eo0aNeqYj9+zZ0/Z7XZlZWU5uuGSdOjQIRUWFrr8dRcVFaUZM2ZoxowZKikp0bhx4/Tggw86/h/s1KlTs9PA3d2JP9GfC/Wvs7mvmea+RwB4P86hBNqRCRMmKDw8XI8++miz5xZardZj3n/NmjXN3q/+3J/6KXu/9XlacuWVV8pms+nhhx9uMlZTU6PCwkJJtR9qG//Gvf4DcOPL758om82m2267TVu3btVtt93mmJ41ZcoU+fr6av78+U2e0zAMxzTTM844Q71799YzzzzjqLPhflLtB9ahQ4dq6dKlTvv88ssvWrVqlS666CKXaj+WN954w2lK3gcffKADBw44PiSfeeaZio2N1csvv+z03n366afaunWr40q3ZWVlTRa4T0xMVFhY2DHf8/qg1Pg9ac5FF10km82m559/3mn7008/LZPJdMwP9ifjoosu0sGDB/X+++87ttXU1Oi5555TaGioUlJS3PI89U7muLf0ftV3hxp+DRYVFWnJkiVuq3PWrFl64IEHmixBc7w6JOmZZ55psm9Lr+VEv6dOVnO1fffdd1q/fv0x72ez2ZpM1Y2NjVXXrl2P+//Jn//8Z4WEhGjWrFk6dOhQk/Hs7GzHskH1x7nxe/XUU09JkuN77WQ0fq9CQ0PVp08fp7oTExO1bds2p/+X//vf/2rdunUn/XzHcqI/Fxp+PzR83z///HP9+uuvbq0JwKlBhxJoR8LDw/XSSy/pT3/6k8444wxdddVVslgsysnJ0b///W+NHj26yYf1hhYtWqSNGzdqypQpjg7Wpk2b9MYbbygqKkp33HGHW56nJSkpKbrhhhu0cOFCbd68WRdccIH8/f2VlZWlZcuWafHixbr88su1dOlSvfjii/r973+vxMREHTlyRK+88orCw8NPKJQVFRU5OmplZWXavn27li9fruzsbF111VVOgTYxMVELFizQvHnztGvXLk2ePFlhYWHauXOnVqxYoeuvv15z586Vj4+PXnrpJU2aNElDhw7VjBkz1KVLF23btk1btmzRf/7zH0nS448/rokTJ2rUqFG67rrrHMtHRERE6MEHHzzp9+x4oqKiNGbMGM2YMUOHDh3SM888oz59+mj27NmSas9XW7RokWbMmKGUlBRdffXVjmVDevXqpTvvvFOSlJmZ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FvdpWG9FRYXy8vI0cuRISXK8BzabTV988YUmT56srl27Ovbv06ePo5tcb/ny5bLb7bryyiud3te4uDj17dtXX3/9tTtfIgDAwwiUbrR69WpNmjRJXbt2lclkcumqgoZh6IknnlBSUpLMZrO6deumRx55xP3FAoAXslgsGj9+vN555x0tX75cNptNl19+ebP7rly5UiNHjlRgYKCioqJksVj00ksvqaio6LjPY7VaVVhYqH/84x+yWCxOf2bMmCFJys3NdbpP7969T+g15OTkaPr06YqKilJoaKgsFotSUlIk6YRq+60ans/40EMPqbCwUElJSRo0aJDuvvtu/fTTT077FxQU6Pbbb1fnzp0VFBQki8XieK319ebm5qq8vFx9+vRp8nyNt2VlZckwDPXt27fJe7t169Ym7ysAoG3jHEo3Ki0t1ZAhQzRz5kxNmTLFpce4/fbbtWrVKj3xxBMaNGiQCgoKVFBQ4OZKAcB7/fGPf9Ts2bN18OBBTZw4sdnz7dasWaNLL71U48aN04svvqguXbrI399fS5YsaXbpkcbsdrsk6dprr9W0adOa3Wfw4MFOt0+kO2mz2XT++eeroKBAf/nLX9SvXz+FhIRo3759mj59uuN5XRUYGKjKykoZhtHkQjiGYaiiokKBgYGObePGjVN2drb+7//+T6tWrdI///lPPf3003r55Zc1a9YsSbVd4W+++UZ33323hg4dqtDQUNntdl144YUu1Wu322UymfTpp5/K19e3yfix1tEEALQ9BEo3mjhxYpOpPw1VVlbqr3/9q959910VFhZq4MCBWrRokVJTUyVJW7du1UsvvaRffvlFycnJkk78N+IA0F78/ve/1w033KBvv/1W77//frP7fPjhhwoMDNR//vMfp/UplyxZ0mTf5q5AarFYFBYWJpvNpvHjx7ut9p9//lmZmZlaunSppk6d6tje8Kqqv0XPnj1VU1Oj7OzsJp3B7du3y2azqWfPnk7bo6KiNGPGDM2YMUMlJSUaN26cHnzwQc2aNUuHDx/Wl19+qfnz5+v+++933KfxFNnY2FgFBgZq+/btTWpqvC0xMVGGYah3795KSkr6rS8ZAODlmPJ6Ct1yyy1av3693nvvPf3000+64oordOGFFzp+cH/88cdKSEjQypUr1bt3b/Xq1UuzZs2iQwmgQwkNDdVLL72kBx98UJMm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6GiFhobqsssu06FDh5z2MZlMTf689957rflSAAAAAKBdaDOB8pprrtGWLVv0+eefa+XKlVq9erWuv/76Y97nzjvv1Mcff6xly5YpPT1d+/fv15QpU5rst2TJEh04cMDxZ/Lkya30KgAAAACg/TAZhmF4uojj2bp1qwYMGKAffvhBZ555piTps88+00UXXaS9e/eqa9euTe5TVFQki8Wid955R5dffrkkadu2berfv7/Wr1+vkSNHSqrtUK5YseI3hcji4mJFRESoqKhI4eHhLj8OAAAAADTmzXmjTXQo169fr8jISEeYlKTx48fLx8dH3333XbP32bhxo6qrqzV+/HjHtn79+qlHjx5av369074333yzYmJiNHz4cL322mtqAxkbAAAAADzOz9MFnIiDBw8qNjbWaZufn5+ioqJ08ODBFu8TEBCgyMhIp+2dO3d2us9DDz2kc889V8HBwVq1apVuuukmlZSU6LbbbmuxnsrKSlVWVjpuFxcXu/CqAAAAAKBt82igvOeee7Ro0aJj7rN169ZWreG+++5z/Pv0009XaWmpHn/88WMGyoULF2r+/PmtWhcAAAAAeDuPBso5c+Zo+vTpx9wnISFBcXFxys3NddpeU1OjgoICxcXFNXu/uLg4VVVVqbCw0KlLeejQoRbvI0kjRozQww8/rMrKSpnN5mb3mTdvnu666y7H7eLiYsXHxx/zdQAAAABAe+PRQGmxWGSxWI6736hRo1RYWKiNGzdq2LBhkqSvvvpKdrtdI0aMaPY+w4YNk7+/v7788ktddtllkqSMjAzl5ORo1KhRLT7X5s2b1alTpxbDpCSZzeZjjgMAAABAR9AmzqHs37+/LrzwQs2ePVsvv/yyqqurdcstt+iqq65yXOF13759Ou+88/TGG29o+PDhioiI0HXXXae77rpLUVFRCg8P16233qpRo0Y5rvD68ccf69ChQxo5cqQCAwP1+eef69FHH9XcuXM9+XIBAAAAoE1oE4FSkt5++23dcsstOu+88+Tj46PLLrtMzz77rGO8urpaGRkZKisrc2x7+umnHftWVlZqwoQJevHFFx3j/v7+euGFF3TnnXfKMAz16dNHTz31lGbPnn1StdVfFZaL8wAAAABwt/qc4Y2rUbSJdSi93Y4dO5SYmOjpMgAAAAC0Y9nZ2UpISPB0GU7aTIfSm0VFRUmScnJy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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}